generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  first_name String
  last_name  String
  email      String     @unique
  password   String
  role       UserRole   @default(ADMIN)
  status     UserStatus @default(ACTIVE)
  isVerified Boolean    @default(false)
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  productCategory ProductCategory[]
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model ProductCategory {
  product_id    Int
  product_sku   String
  category_name String
  category_id   Int
  category      Category @relation(fields: [category_id], references: [id])
  product       Product  @relation(fields: [product_id], references: [id])

  @@id([product_id, category_id])
}

model Product {
  id              Int               @id @default(autoincrement())
  sku             String            @unique
  name            String            @unique
  description     String?
  image           String?
  qtyThreshold    Int?
  brand_id        Int
  brand           Brand             @relation(fields: [brand_id], references: [id])
  bundleProduct   BundleProduct[]
  productCategory ProductCategory[]
  stockQuantity   StockQuantity[]
}

model Location {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  address       String
  stockQuantity StockQuantity[]
}

model StockQuantity {
  product_id    Int
  product_name  String
  product_sku   String
  location_id   Int
  quantity      Int
  price         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  location_name String
  location      Location @relation(fields: [location_id], references: [id])
  product       Product  @relation(fields: [product_id], references: [id])

  @@id([product_id, location_id])
}

model Bundle {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String
  price         Float
  bundleProduct BundleProduct[]
}

model BundleProduct {
  bundle_id   Int
  product_id  Int
  product_sku String
  bundle_name String
  bundle      Bundle  @relation(fields: [bundle_id], references: [id])
  product     Product @relation(fields: [product_id], references: [id])

  @@id([product_id, bundle_id])
}

model ProcurementOrder {
  id                Int                    @id @default(autoincrement())
  order_date        DateTime
  description       String
  payment_status    PaymentStatus          @default(PENDING)
  fulfilment_status FulfilmentStatus       @default(CREATED)
  supplier_id       Int
  total_amount      Float
  warehouse_address String
  supplier_address  String
  supplier_email    String
  supplier_name     String
  proc_order_items  ProcurementOrderItem[]
}

model ProcurementOrderItem {
  quantity      Int
  proc_order_id Int
  id            Int              @id @default(autoincrement())
  product_name  String
  product_sku   String
  rate          Float
  proc_order    ProcurementOrder @relation(fields: [proc_order_id], references: [id])
}

model Supplier {
  id      Int    @id @default(autoincrement())
  email   String
  name    String
  address String
}

enum UserRole {
  ADMIN
  INTERN
  PARTTIME
  FULLTIME
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  DISABLED
}

enum PaymentStatus {
  PENDING
  PAID
}

enum FulfilmentStatus {
  CREATED
  ARRIVED
  COMPLETED
}
